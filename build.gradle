import java.text.SimpleDateFormat

buildscript {
    dependencies {
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath('gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17')
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.github.johnrengelman.shadow" version "4.0.2"
}

apply plugin:"application"
apply plugin:"groovy"
apply plugin:"java"


version "0.1"
// group "com.teachforward.eureka"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:1.0.2'
    }
}

dependencies {
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-http-server-netty"
    compile "io.micronaut:micronaut-runtime-groovy"
    compile "io.micronaut:micronaut-validation"

    compile "io.micronaut:micronaut-discovery-client"

    // micrometer-registry-statsd also pulls in micrometer-core so included above to verbose example
    compile "io.micronaut.configuration:micronaut-micrometer-core"
    compile "io.micronaut.configuration:micronaut-micrometer-registry-statsd"

    // required to enable endpoints
    compile "io.micronaut:micronaut-management"

    compileOnly "io.micronaut:micronaut-inject-groovy"
    compileOnly "io.micronaut:micronaut-inject-java"
    runtime "ch.qos.logback:logback-classic:1.2.3"

    runtime "ch.qos.logback:logback-classic:1.2.3"
    runtime "net.logstash.logback:logstash-logback-encoder:5.2"
    
    testCompile "io.micronaut:micronaut-inject-groovy"
    testCompile("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testCompile "junit:junit:4.12"
    testCompile "io.micronaut:micronaut-inject-java"
    testCompile "org.hamcrest:hamcrest-all:1.3"
}

jar {
    baseName = 'eureka-example'
}

shadowJar {
    mergeServiceFiles()
    baseName = 'eureka-example'
}

run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1')

mainClassName = "com.teachforward.eureka.Application"
tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}

//pass system properties to run and bootRun tasks
tasks.withType(JavaExec).each { task ->
    task.systemProperties(System.properties)
}


apply plugin: 'docker'

docker {
    baseImage("java:8")
    maintainer 'Educopia Development "services@educopia.com"'
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    applicationName = jar.baseName

    tagVersion = ((findProperty('docker.tag.version') == 'true') ? jar.version : 'latest')

    volume('/tmp')
    addFile("${jar.baseName}-${jar.version}-all.jar", 'app.jar')
    exposePort(8109)
    runCommand("bash -c 'touch /app.jar'")
    setEnvironment('MICRONAUT_ENVIRONMENTS','docker')
    entryPoint(["sh", "-c", "java \$JAVA_OPTS \$EXTRA_PROPS -Djava.security.egd=file:/dev/./urandom -jar /app.jar"])

    doFirst {
        copy {
            // Copy all the JAR files from the build directory.
            //  We really need the *-all.jar to make it work with Docker
            from file("$buildDir/libs")
            into stageDir
        }
    }
}

task printVersion {
    doFirst {
        println "$jar.version"
    }
}

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "UTC"
}

def buildTime() {
    final dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ")
    dateFormat.timeZone = TimeZone.getTimeZone('UTC')
    dateFormat.format(new Date())
}

class Version {
    int major, minor
    long revision

    String toString() {
        "$major.$minor.$revision"
    }
}